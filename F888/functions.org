#+title: Functions in F888
#+author: omnit3a
#+startup: indent

* Notation
[[./type-system.html][See Type System]]

* Function Expression Definition
Let α be the name of a function which accepts two arguments
of type ℕ (named x and y, respectively), and outputs their sum,
which is of type ℕ.
This function would be written in F888 as the following:
#+begin_src text
          α.(x, y) : Func (Nat, Nat) -> Nat
          α := x + y
#+end_src

In this example, the first line of code defines the typing of
α, and the second line defines the expression that is assigned to α.

It is important to note that the result of a function is returned
implicitly, as opposed to languages such as C and C++, where the
return value of a function must be explictly defined using the
=return= keyword.

Function expression definitions do not include the name of
their arguments, as the function as the expression is being
defined includes the arguments as part of it's type information.

* Recursive Functions
Functions whose expression includes recursion must have the =rec=
keyword prefixed before said function's expression definition.

Take for example, a function (named "fac"), which accepts
one argument of type ℕ (named "x"), and returns the factorial of
the input argument as a variable of type ℕ. This function would
calculate the factorial of its input using recursion
This function could be written as the following:
#+begin_src text
          fac.(x) : Func (Nat) -> Nat
          rec fac = do
              if x = 0
              then 1
              else x * fac (x - 1)
          end
#+end_src
